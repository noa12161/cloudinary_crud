순서도
  컴포넌트 구성
  서버 api작성
  요청 테스트
  heroku에 배포후 확인





App.js


  컴포넌트

      Multer.js
        파일에 보낼 form 작성
        form 가공후 서버에 생성 전송 /users/add
      Posts.js
        const userDatas = 모든 user정보 요청 /users/get
        userData{name, birthDate, photo 출력}

  서버 api

    1. index.js(메인서버.js) 에서 bodyparser, cors, mongoose 연결
    2. qpp.use('/이미지저장폴더', express.static(path.join(__dirname, '이미지저장폴더')))
    3. multer 설정
      a. destination: 이미지저장폴더이름
      b. filename: 확장자를 제외한 이미지이름 + 업로드시간(ms단위) + 확장자
    4. multer 미들웨어 라우터에 연결
      multer밀들웨어 -> ADD함수
        mongoDB에 image field에 이미지의 경로를 저장 ( photo: req.file.path )
        --> 사용자가 업로드 했을시 서버에 저장되는 예시
        -> /이미지저장폴더이름/확장자를 제외한 이미지이름/업로드시간/확장자

  
  클라이언트 요청

    클라이언트가 mongoDB에 document를 요청후 응답받은 document의
    image field의 값으로 img태그의 src로 이용
    eg) <img src={document.image} alt='imageFromDB'/>



  heroku 배포

    app.use(express.static(path.join(__dirname, "./client/build")));
    app.get("*", (req, res) => {
      res.sendFile(path.join(__dirname, "./client/build", "index.html"));
    });

    git으로 배포하기 (commit된 git으로 배포)
    git init -> add -> commit
    heroku login
    heroku create -a multer-practice(프로젝트이름)
    git push heroku master(브랜치이름)
